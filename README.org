* Motivation

When using some serialization libraries I have to write code to traverse my data structures and then put each of my struct's fields into the format the serialization library wants, and then I have to do this again in reverse.

This library reduces most of that boilerplate, but only for certain types of data structures. I plan to use it for (copyable, assignable, default constructible) structs with public fields, numbers, enums, std::string, and std::vector. For these data structures, the library defines a generic traversal routine that recursively visits each element, calling a serialization/deserialization function for each.

Since there are many different data structures and many different serialization/deserialization libraries, there are two axes for extension:

| Visitor \\ Type    | number | string | vector | struct1 | struct2 | ... |
|--------------------+--------+--------+--------+---------+---------+-----|
| (generic)          |        |        |        |       2 |       2 |   2 |
| Debug output       |      1 |      1 |      1 |         |         |     |
| Binary serialize   |      1 |      1 |      1 |         |         |     |
| Binary deserialize |      1 |      1 |      1 |         |         |     |
| JSON serialize     |      1 |      1 |      1 |         |         |     |
| JSON deserialize   |      1 |      1 |      1 |         |         |     |
| GUI output         |      1 |      1 |      1 |         |         |     |
| ...                |        |        |        |         |         |     |

I don't want to define every one of these. Instead, each visitor type defines the (1) entries: it has to handle numbers, strings, vectors. Each user-defined struct defines the (2) entries. The library fills in the rest.

I created this library primarily for my own use.

* Installation

This is a header-only library, but if you are want to use the optional JSON component, install picojson:

#+begin_src sh
git submodule init
git submodule update
#+end_src

* Usage

To use any of the visitors, construct one, then call the visit function. The error handling differs for each type of visitor. CoutWriter and BinarySerialize and JsonWriter don't report errors; BinaryDeserialize has an Errors() function; JsonReader takes an errors stream parameter that it writes to.

#+begin_src cpp
traverse::BinarySerialize writer;
visit(writer, yourobject);

traverse::BinaryDeserialize reader;
visit(reader, yourobject)
if (!reader.Errors().empty()) throw reader.Errors();
#+end_src

To define traversal of a user-defined struct:

#+begin_src cpp
struct Point {
    int32_t x;
    int32_t y;
};

TRAVERSE_STRUCT(Point, FIELD(x) FIELD(y))
#+end_src

If the fields aren't public, you will need to declare the visit functions as friends; see traverse.h for details.

For portability, use {uint,int}{8,16,32,64}_t types instead of char, bool, int, long. For enums, use C++11 enums that let you specify the size. The binary serialize/deserialize formats will handle size changes but other visitor classes may not.

* Visitor types

As described in the Motivation section, I want to be able to extend the set of visitors or the set of data types. These are the visitor types included with the library:

** Debug output

The =CoutWriter= writes everything to stdout.

** Binary serialization

The =BinarySerialize= and =BinaryDeserialize= classes write/read to a simple binary format. 
There is no backwards/forwards compatibility, compression, optional fields, data structure sharing, zero-copy, support for multiple programming languages, or other nice features. 

If there are errors during deserialization, the =errors= field will contain them. If the string is empty, there were no errors.

** JSON serialization

The JSON serialize and deserialize uses the [[https://github.com/kazuho/picojson][picojson]] library. The visitors convert /to and from picojson values/, not to and from JSON strings. The caller uses picojson to parse a JSON string into a picojson value, then a deserialization visitor to convert a picojson value into the data structure. In the other direction, the caller uses the serialization visitor to convert a data structure into a picojson value, then the picojson library can stringify that into a JSON string. See the top of traverse-json.h.

When deserializing, the library leaves data unchanged in the object if it does not have new data to place there. If the JSON object does not contain all the fields in the user struct, or if the types don't match, those fields will be left unchanged.

Any errors and warnings during deserialization are written to the =errors= stream. Use a stringstream that captures them; if the string is empty, there were no problems.

** Other serialization

The intent of this library is to define data structure traversal separately from the serialization format, so you can write a visitor class to interface to Protocol Buffers, Thrift, Capn Proto, Flatbuffer, MsgPack, XML, YAML, JSON, or one of many other formats. The only one of these I've tried is JSON, using picojson.

** Other visitors

I've used this library to visit the fields of data structures so that I can display them with the [[https://github.com/ocornut/imgui][dear imgui]] library. I haven't included that code here. Look at the existing visitors in traverse.h to see how to write a new one. You'll have to define how the visitor works with each data type (integers, strings, vectors, structs).

* Data types

As described in the Motivation section, I want to be able to extend the set of visitors or the set of data types. These are the data types included with the library:

** Signed, unsigned integers

For binary serialization, integers are encoded using Google's ZigZag format (from Google Protocol Buffers). It handles big/little endian, changes in size (e.g. network server is 64 bit but client is 32 bit), and also encodes pretty compactly. For JSON, integers are written as JSON numbers; the library doesn't handle overflow.

** std::string

For binary serialization, strings are written as a size followed by the data. For JSON, strings are written as JSON strings.

** std::vector

For binary serialization, vectors are written as a size followed by serializing each element. For JSON, vectors are written as JSON arrays.

** User-defined structs

Use the =TRAVERSE_STRUCT= macro to define the visitor for a user-defined struct or class. For example: =TRAVERSE_STRUCT(Point, FIELD(x) FIELD(y))= will visit the =x= and =y= fields of the =Point= class. If the fields aren't public, you need to make the visitor a friend. Put =TRAVERSE_IS_FRIEND(MyUserType)= inside your class =MyUserType= to declare the friend functions.

For binary serialization, structs are written by serializing each field. For JSON, structs are written as JSON objects.

** Variant data types

For passing messages over a network or through an external message queue, I've used the [[https://github.com/mapbox/variant][mapbox variant]] library, which is similar to boost::variant. Instead of sending /many/ types of messages =A=, =B=, =C= over the network, I send /one/ type, =variant<A,B,C>=. The variant keeps track of which type the message is.

This keeps the system simpler. I don't need serialization to know about multiple types; it only knows about serializing one type. The variant class knows about multiple types but not about serialization.

I can then make serialization work with variants by writing out the integer variant code, then the data:

#+begin_src cpp
namespace traverse {

struct BinarySerializeVariantHelper {
  BinarySerialize& writer;
  template<typename T> void operator()(const T& value) {
    visit(writer, value);
  }
};

template<typename ...Variants>
void visit(BinarySerialize& writer, 
           const variant<Variants...>& value) {
  uint8_t which = value.which();
  visit(writer, which);
  mapbox::util::apply_visitor(
      BinarySerializeVariantHelper{writer}, 
      value
  );
}

}
#+end_src

I can make deserialization work with variants by iterating over the variant types and invoking deserialization when the variant code matches:

#+begin_src cpp
namespace traverse {

template<typename VariantType>
void deserialize_variant_helper(BinaryDeserialize& reader,
                                uint8_t which, uint8_t index,
                                VariantType&) {
  reader.errors << "Error: tried to deserialize variant " << which
                << " but there were only " << index << " types."
                << std::endl;
}

template<typename VariantType, typename First, typename ...Rest>
void deserialize_variant_helper(BinaryDeserialize& reader,
                                uint8_t which, uint8_t index,
                                VariantType& value) {
  if (which == index) {
    value.template set<First>();
    visit(reader, value.template get<First>());
  } else {
    deserialize_variant_helper<VariantType, Rest...>(
        reader, which, index+1, value);
  }
}
  
template<typename ...Variants>
void visit(BinaryDeserialize& reader, 
           variant<Variants...>& value) {
  uint8_t which;
  visit(reader, which);
  deserialize_variant_helper<variant<Variants...>, Variants...>
    (reader, which, 0, value);
}

}
#+end_src

This code is neither part of BinarySerialize/BinaryDeserialize nor part of mapbox variant. It's a small amount of glue code that makes these independent libraries work together.

I didn't implement JSON serialization for variants.

** Other data types

You'll have to define how the data type works with each of the visitors that you want to use (binary serialize, binary deserialize, etc.). Look at traverse.h to see how string and vector work, or look above to see how I defined serialize and deserialize for variant types.

I didn't need float/double for my project so I didn't implement them.

* Libraries

I'm using the [[https://github.com/kazuho/picojson][picojson]] library, licensed 2-clause BSD:

#+begin_example
Copyright 2009-2010 Cybozu Labs, Inc.
Copyright 2011-2014 Kazuho Oku
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
#+end_example

